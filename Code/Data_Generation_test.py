import numpy as np
import pandas as pd
from ctgan import CTGAN
from CTGAN_code import KAN_CTGAN

# Import the dataset for the test
#df = pd.read_csv("TestDatasets/adult.csv")
df = pd.read_csv("TestDatasets/energydata_complete.csv", nrows=10000)

# Preprocessing the data
df.columns = df.columns.str.strip()

# Parse datetime columns
datetime_columns = []
for col in df.columns:
    if df[col].dtype == object:
        converted = pd.to_datetime(df[col], errors="coerce", infer_datetime_format=True)
        if converted.notna().mean() > 0.8:
            converted = converted.fillna(method="ffill")
            # Convert to Unix timestamp (seconds)
            df[col] = converted.astype(np.int64) // 10**9
            datetime_columns.append(col)
            print(f"Column '{col}' was parsed as datetime -> converted to Unix timestamp.")

# Enforce numeric for everything recognized or newly numeric
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors="coerce")

discrete_columns = list(df.select_dtypes(include=["object", "category", "bool"]).columns)

# Clean the discrete_columns set, removing any datetime col
discrete_columns = list(set(discrete_columns) - set(datetime_columns))

# Check for mixed types in columns
for col in df.columns:
    sample_types = set(df[col].dropna().map(type))
    if len(sample_types) > 1:
        print(f"Warning: Column '{col}' has mixed types {sample_types}. Removing it.")
        df.drop(columns=[col], inplace=True)

# Now see what's final
discrete_columns = [c for c in discrete_columns if c in df.columns]

# Create the standard model 
model = CTGAN(epochs=30, verbose=True)
model.fit(df, discrete_columns=discrete_columns)
print("Model trained successfully")

# Sample the table generated by the standard model
synthetic_df_STANDARD_CTGAN = model.sample(100)
print(synthetic_df_STANDARD_CTGAN.head())
synthetic_df_STANDARD_CTGAN.to_csv("TestDatasets/EnergySynthetic/synthetic_df_STANDARD_CTGAN.csv", index=False)

# Try the KAN_CTGAN Model
model = KAN_CTGAN(epochs=30, verbose=True)
model.fit(df, discrete_columns=discrete_columns)
print("Model trained successfully")

# Sample the table generated by the KAN_CTGAN model
synthetic_df_KAN_CTGAN = model.sample(100)
print(synthetic_df_KAN_CTGAN.head())
synthetic_df_KAN_CTGAN.to_csv("TestDatasets/EnergySynthetic/synthetic_df_KAN_CTGAN.csv", index=False)